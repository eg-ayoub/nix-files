TODO
# /etc/nixos/configuration.nix

{ config, pkgs, ... }:

{
  # Set your server's hostname
  networking.hostName = "pup";

  # ====================================================================
  # Section 1: Network Setup (System-Level Bridge and Static IP for Host)
  # ====================================================================

  # Enable systemd-networkd for managing network interfaces
  systemd.network.enable = true;
  # Ensures network is fully online before services that depend on it start
  systemd.network.wait-online.enable = true;

  # Define the virtual bridge interface (br0)
  systemd.network.netdevs = {
    "10-br0" = { # Numerical prefix helps order if you have many
      netdevConfig = {
        Kind = "bridge";
        Name = "br0";
      };
    };
  };

  # Configure your physical interface (enp1s0f0) to be enslaved to br0
  # It will no longer have its own IP address.
  systemd.network.networks = {
    "20-enp1s0f0" = { # Replace 'enp1s0f0' with your actual physical interface name
      matchConfig.Name = "enp1s0f0";
      networkConfig.Bridge = "br0";
      linkConfig.RequiredForOnline = "enslaved";
    };

    # Configure the bridge (br0) with a STATIC IP address.
    # This is the primary IP for your NixOS server (the host machine).
    # It MUST be static because AdGuard Home (running on this host) is your DHCP server.
    "30-br0" = {
      matchConfig.Name = "br0";
      networkConfig = {
        DHCP = "no"; # CRITICAL: Disable DHCP for the host's primary interface
        addresses = [
          { address = "192.168.1.45/24"; } # YOUR SERVER'S STATIC IP AND SUBNET MASK
                                          # This IP must be OUTSIDE the range AdGuard Home will hand out via DHCP.
        ];
        gateway = [ "192.168.1.254" ]; # YOUR ROUTER'S IP (your actual internet gateway)
        dns = [
          "127.0.0.1" # Host can use its own AdGuard Home instance for DNS
          "8.8.8.8"   # Fallback DNS for the host
        ];
        # For IPv6, if you want static or specific configuration:
        # dhcpv6 = "no"; # or "yes" if your router provides DHCPv6
        # addresses = [ { address = "2001:db8::10/64"; } ];
        # gateway = [ "fe80::1" ]; # Your IPv6 router's link-local address
      };
      linkConfig.RequiredForOnline = "routable"; # Ensures br0 is ready for network services
    };
  };

  # Firewall Configuration: Only open necessary ports
  networking.firewall.enable = true;
  networking.firewall.allowedTCPPorts = [
    80    # For Nginx Proxy Manager (HTTP)
    443   # For Nginx Proxy Manager (HTTPS)
    81    # For Nginx Proxy Manager Web UI
    22    # For SSH access to your NixOS server
    # Add any other TCP ports for services running directly on the host
    # that you want accessible from your LAN or via port forwarding from router.
  ];
  networking.firewall.allowedUDPPorts = [
    53    # For AdGuard Home (DNS)
    67    # For AdGuard Home (DHCP server)
    68    # For AdGuard Home (DHCP client replies)
    546   # For AdGuard Home (DHCPv6 client replies, if applicable)
    547   # For AdGuard Home (DHCPv6 server, if applicable)
    # Add any other UDP ports for services running directly on the host.
  ];


  # ====================================================================
  # Section 2: OCI and Podman Setup
  # ====================================================================

  # Enable Podman virtualization
  virtualisation.podman.enable = true;
  # Enable the Podman socket for Docker API compatibility (for local tools)
  virtualisation.podman.dockerSocket.enable = true;
  # The oci-containers module needs to know which backend to use.
  # Podman is the default, but explicit declaration is recommended for clarity/robustness.
  virtualisation.oci-containers.backend = "podman";

  # Add your user to the 'podman' group to manage containers without sudo (optional, but convenient)
  users.users.<your_username> = {
    isNormalUser = true;
    extraGroups = [ "wheel" "podman" ]; # 'wheel' for sudo access
    # Ensure your user's password hash or SSH key login is configured elsewhere.
  };

  # If you intend to run containers as a rootless user AND bind them to privileged ports (<1024),
  # you might need this (uncomment if you encounter permission errors for ports 80/443 with rootless).
  # boot.kernel.sysctl = {
  #   "net.ipv4.ip_unprivileged_port_start" = 80;
  # };


  # ====================================================================
  # Section 3: AdGuard Home Setup
  # ====================================================================

  services.adguardhome = {
    enable = true;
    mutableSettings = true; # Allows changes via the web UI
    openFirewall = true; # NixOS will open default AGH ports (53, 3000 by default if bind_port isn't 80/443)

    settings = {
      # AdGuard Home's web interface and DNS server will listen on the static IP of br0
      bind_host = "192.168.1.45"; # YOUR SERVER'S STATIC IP
      bind_port = 3000; # Keep 3000 if NPM is taking 80/443. Access AGH UI at http://192.168.1.45:3000
    };

    # Grant CAP_NET_RAW capability for AdGuard Home's DHCP server functionality
    serviceConfig.AmbientCapabilities = [ "CAP_NET_RAW" ];
  };
  # IMPORTANT: After applying this config, you MUST go to AdGuard Home's Web UI:
  # -> Settings -> DHCP settings:
  #    - Enable DHCP server
  #    - Select 'br0' as the interface
  #    - Set 'Router IP address' to 192.168.1.254 (YOUR ROUTER'S IP)
  #    - Set 'Subnet mask' to 255.255.255.0 (or appropriate for /24)
  #    - Define 'IP Range start' (e.g., 192.168.1.100) and 'IP Range end' (e.g., 192.168.1.254)
  #      --> ENSURE this range DOES NOT INCLUDE 192.168.1.45 (your server's static IP)
  #      --> ENSURE this range DOES NOT INCLUDE 192.168.1.254 (your router's IP)


  # ====================================================================
  # Section 4: Nginx Proxy Manager (NPM) Setup (as an OCI Container)
  # ====================================================================

  virtualisation.oci-containers.containers = {
    # Nginx Proxy Manager application container (using SQLite for database)
    nginx-proxy-manager = {
      image = "jc21/nginx-proxy-manager:latest";
      autoStart = true; # Start automatically on boot
      ports = [
        "80:80"    # Map container port 80 to host port 80 (for proxied HTTP traffic)
        "443:443"  # Map container port 443 to host port 443 (for proxied HTTPS traffic)
        "81:81"    # Map container port 81 to host port 81 (for NPM's own web UI)
      ];
      volumes = [
        "/var/lib/nginx-proxy-manager:/data" # Persistent storage for SQLite DB and certificates
      ];
      environment = {
        TZ = "Europe/Paris"; # Set your timezone
      };
      # Connect NPM to the host's system bridge 'br0'.
      # NPM will get its own IP from AdGuard Home on this bridge.
      extraOptions = [ "--network=bridge=br0" ];
      # If you set a different root user (non-rootful Podman), uncomment these:
      # user = "your_username";
      # group = "your_username";
    };
  };
  # After `nixos-rebuild switch`, access NPM UI at http://192.168.1.45:81
  # Log in with admin@example.com / changeme and change credentials immediately.


  # ====================================================================
  # Section 5: Example Podman Service (Jellyfin as an OCI Container)
  # ====================================================================

  virtualisation.oci-containers.containers.jellyfin = {
    image = "lscr.io/linuxserver/jellyfin:latest";
    autoStart = true; # Start automatically on boot
    # Ports are NOT mapped here if NPM is solely proxying it.
    # If you want direct access to Jellyfin (e.g., http://<jellyfin_ip>:8096), you would add:
    # ports = [ "8096:8096" ];
    volumes = [
      "/var/lib/jellyfin/config:/config"      # Persistent config storage
      "/mnt/media/movies:/data/movies:ro"     # Example: Read-only mount for your movie library
      "/mnt/media/tvshows:/data/tvshows:ro"   # Example: Read-only mount for your TV show library
    ];
    environment = {
      PUID = "1000"; # Your user's UID (run 'id -u <your_username>')
      PGID = "100";  # Your user's GID (run 'id -g <your_username>')
      TZ = "Europe/Paris"; # Your timezone
    };
    # Connect Jellyfin to the host's system bridge 'br0'.
    # Jellyfin will get its own IP from AdGuard Home on this bridge.
    extraOptions = [ "--network=bridge=br0" ];
    # If you set a different root user (non-rootful Podman), uncomment these:
    # user = "your_username";
    # group = "your_username";
  };
  # After `nixos-rebuild switch`, Jellyfin will get an IP from AdGuard Home.
  # In NPM, you'll create a Proxy Host (e.g., 'jellyfin.yourdomain.com') that forwards to:
  # - Scheme: http (if Jellyfin container doesn't use HTTPS internally)
  # - Forward Hostname / IP: The IP address Jellyfin gets from AdGuard Home (e.g., 192.168.1.101)
  # - Forward Port: 8096 (Jellyfin's internal port)


  # Add any other global NixOS configurations below
  # e.g., programs.ssh.enable, services.openssh, boot, fileSystems etc.
}
